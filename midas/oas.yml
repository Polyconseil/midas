openapi: "3.0.1"
info:
  title: Midas
  description: Midas API
  termsOfService: http://example.com
  contact:
    name: API Support
    email: autolib-dev+midas@polyconseil.fr
  license:
    name: MIT
    url: https://opensource.org/licenses/mit-license.php
  version: "0.0.dev0"
servers:
- url: https://api-midas.bluesolutions.com/api/
  description: Demonstration server
components:
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    forbidden:
      description: Forbidden
    notFound:
      description: Resource not found
  parameters:
    provider:
      name: provider
      in: path
      required: true
      schema: {type: string, format: uuid}
    uid:
      name: uid
      in: path
      required: true
      schema: {type: string, format: uuid}
  schemas:
    # RFC7946 objects
    Geometry:
      type: object
      description: GeoJSON Geometry
      discriminator: {propertyName: type}
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1"}
      required: [type]
      properties:
        type:
          type: string
          enum:
          - Point
          - LineString
          - Polygon
          - MultiPoint
          - MultiLineString
          - MultiPolygon
          - GeometryCollection
    Position:
      type: array
      minItems: 2
      items: {type: number}
    LineCoordinates:
      type: array
      minItems: 2
      items: {$ref: "#/components/schemas/Position"}
    PolygonCoordinates:
      type: array
      minItems: 1
      items:
        type: array
        description: Ring
        minItems: 4
        items: {$ref: "#/components/schemas/Position"}
    Point:
      type: object
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.2"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates: {$ref: "#/components/schemas/Position"}
      example:
        type: Point
        coordinates:
        - 2.34
        - 48.86
    MultiPoint:
      type: object
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.3"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items: {$ref: "#/components/schemas/Position"}
      example:
        type: MultiPoint
        coordinates: [[2.34, 48.86]]
    LineString:
      type: object
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.4"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates: {$ref: "#/components/schemas/LineCoordinates"}
      example:
        type: LineString
        coordinates: [[2.34, 48.86], [2.35, 48.87]]
    MultiLineString:
      type: object
      description: GeoJSON MultiLineString
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.5"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items: {$ref: "#/components/schemas/LineCoordinates"}
      example:
        type: MultiLineString
        coordinates: [[[2.34, 48.86], [2.35, 48.87]]]
    Polygon:
      type: object
      description: GeoJSON Polygon
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.6"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates: {$ref: "#/components/schemas/PolygonCoordinates"}
      example:
        type: Polygon
        coordinates: [[[2.34, 48.86], [2.35, 48.87], [2.36, 48.88], [2.34, 48.86]]]
    MultiPolygon:
      type: object
      description: GeoJSON MultiPolygon
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.7"}
      required: [coordinates]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items: {$ref: "#/components/schemas/PolygonCoordinates"}
      example:
        type: MultiPolygon
        coordinates: [[[[2.34, 48.86], [2.35, 48.87], [2.36, 48.88], [2.34, 48.86]]]]
    GeometryCollection:
      type: object
      description: GeoJSON MultiPolygon
      externalDocs: {url: "https://tools.ietf.org/html/rfc7946#section-3.1.8"}
      required: [geometries]
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            geometries:
              type: array
              items: {$ref: "#/components/schemas/Geometry"}
    # RFC7946 compliant features
    GPSPoint:
      type: object
      required: [type, properties, geometry]
      properties:
        type: {type: string, enum: [Feature]}
        geometry: {$ref: "#/components/schemas/Point"}
        properties:
          type: object
          required: [gsm, gps]
          properties:
            gsm:
              type: object
              required: [timestamp]
              properties:
                operator: {type: string}
                signal: {type: number, minimum: 0, maximum: 1}
                timestamp: {type: string, format: date-time}
            gps:
              type: object
              required: [timestamp]
              properties:
                accuracy: {type: integer, minimum: 1}
                course:
                  type: number
                  minimum: 0
                  maximum: 360
                  exclusiveMaximum: true
                speed: {type: number, minimum: 0}
                timestamp: {type: string, format: date-time}
            vehicle_state:
              type: object
              properties:
                speed: {type: number, minimum: 0}
                acceleration:
                  type: array
                  items: {type: number}
                  minLength: 3
                  maxLength: 3
                odometer: {type: integer, minimum: 0}
                driver_present: {type: boolean}
            energy:
              type: object
              properties:
                cruise_range: {type: integer}
                autonomy: {type: number, minimum: 0, maximum: 1}
    Route:
      type: object
      required: [type, features]
      properties:
        type: {type: string, enum: [FeatureCollection]}
        features:
            type: array
            items: {$ref: "#/components/schemas/GPSPoint"}
    ServiceMap:
      type: object
      required: [type, features]
      properties:
        type: {type: string, enum: [FeatureCollection]}
        features:
          type: array
          items: {$ref: "#/components/schemas/ServiceArea"}
    ServiceArea:
      type: object:
      required: [type, properties, geometry]
      properties:
        type: {type: string, enum: [Feature]}
        geometry: {$ref: "#/components/schemas/Point"}
        properties:
          type: object
          required: [id, start_date, area]
          properties:
            id: {type: string, format: uuid}
            start_date: {type: string, format: date-time}
            end_date: {type: string, format: date-time, nullable: true}
            area: {$ref: "#/components/schemas/Polygon"}
            tarification: {type: string}
paths:
  /service_map/{provider}:
    get:
      security: [{apiKey: []}]
      parameters:
      - {$ref: "#/components/parameters/provider"}
      - name: date
        in: query
        required: false
        schema: {type: string, format: date-time}
      responses:
        403: {$ref: "#/components/responses/forbidden"}
        200:
          description: Success
          content:
            application/json:
              schema: {$ref: "#/components/schemas/ServiceMap"}
  /vehicle/{provider}/{uid}:
    put:
      security: [{apiKey: []}]
      parameters:
      - {$ref: "#/components/parameters/provider"}
      - {$ref: "#/components/parameters/uid"}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identification_number, type, propulsion_type]
              properties:
                identification_number: {type: string}
                type: {type: string, enum: [bicycle, car, scooter]}
                propulsion_type:
                  type: string
                  enum: [human, electric, electric_assist, combustion]
                year_manufactured: {type: integer}
                manufacturer: {type: string}
                model: {type: string}
      responses:
        200: {description: Updated}
        201: {description: Created}
        403: {$ref: "#/components/responses/forbidden"}
        404: {$ref: "#/components/responses/notFound"}
    post:
      security: [{apiKey: []}]
      parameters:
      - {$ref: "#/components/parameters/provider"}
      - {$ref: "#/components/parameters/uid"}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                # location is required if state is not "removed_*"
                location: {$ref: "#/components/schemas/GPSPoint"}
                status:
                  type: string
                  enum:
                  - available
                  - removed
                  - reserved
                  - unavailable
      responses:
        200: {description: Success}
        403: {$ref: "#/components/responses/forbidden"}
        404: {$ref: "#/components/responses/notFound"}
    delete:
      security: [{apiKey: []}]
      parameters:
      - {$ref: "#/components/parameters/provider"}
      - {$ref: "#/components/parameters/uid"}
      responses:
        200: {description: Success}
        403: {$ref: "#/components/responses/forbidden"}
        404: {$ref: "#/components/responses/notFound"}
